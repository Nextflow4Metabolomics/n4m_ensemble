/**
    RUMP: A Reproducible Untargeted Metabolomics Data Processing Pipeline
    Description : This file in the configuration of RUMP, including resource allocation and parameters information
    Author      : Xinsong Du
    License     : MIT License
          
    This script is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    MIT License for more details.
    
    You should have received a copy of the MIT License
    along with this script.  If not, see <https://opensource.org/licenses/MIT>.
    
    For any bugs or problems found, please contact us at
    - xinsongdu@ufl.edu, manfiol@ufl.edu, djlemas@ufl.edu; 
    - https://github.com/Nextflow4Metabolomics/nextflow4ms-dial
*/

params
{
    table_1 = "functional_test/sample_data/table_1.txt" // Location of the first peak table
    table_2 = "functional_test/sample_data/table_2.txt" // Location of the second peak table
    peak_merge_code = "src/peak_merge.py"
    quantification_code = "src/quantification.py"
    column_name_for_mz_values = "'Average Mz'"
    column_name_for_rt_values = "'Average Rt(min)'"
    ppm_threshold_for_merging = 10
    rt_threshold_for_merging = 0.3
    merging_result = "table_merged.csv"

    column_name_for_annotation_status = "'Annotation tag (VS1.0)'"
    desired_identification_status = "'annotated by user-defined text library'"
    column_name_for_annotated_metabolites = "'Metabolite name'"
    quantification_result = "quantification.csv"

    max_cpus = 5
    max_memory = 6.GB
    max_time = 12.h
}

process.container = 'xinsongdu/metabolomics_software_containerization:v2'
// process.containerOptions = "--user root"

process 
{
//    executor = 'slurm'  
    
//    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
//    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
//    time = { check_max( 24.h * task.attempt, 'time' ) }

    withName: peak_merge
    {
        time =  '1800m'
        cpus = 1
        memory = '7 GB'  
    }
    withName: quantification
    {
        time =  '15m'
        cpus = 1
        memory = '4 GB'  
    }
}